---
title: "Manipulating and analyzing data in the tidyverse, Part 1"
date: 11/12/2024
author: "Marco Castaneda Martinez"
format: html
editor: visual
---

## Data Manipulation Part 1

-   Select columns for filtering

-   Pipes

-   Mutate

-   Group by & Summarize

```{r}
library(tidyverse)

surveys <- read_csv("data/portal_data_joined.csv")

str(surveys)
```

1.  When you print a tibble, R displays the data type of each column under its name; it prints only the first few rows of data and only as many columns as fit on one screen.

2.  Columns of class `character` are never automatically converted into factors

-----------------------------------------------------------------------

## Selecting Columns and Filtering Rows

We will be learning a couple of functions

-   Select( )- This is for selecting columns

-   filter( )- This is for selecting rows

-   mutate( )- This allows you to create new columns based on exsisting columns. Like conversions, etc.

-   group_by( )- Allows you to select categorical variables

-   Summarize( )- you can calculate summary on a group, such as a mean or total for that group.

    -   you can use group_by( ) to split the date into male and female groups, then use summarize( ) to calculate the average weight for each group.

        ## Pipes 

Lets you take the output of one function and send it directly to the nest, which is useful when you need to do many things to the same data set. Pipes look like %\>%

-   In the code below, we use a pipe to send the surveys dataset first though a filter( ) to keep rows where the weight is less than 5. Then use select( ) to keep only the species_id, sex, and weight columns. You always want to start explicitly stating the dataset, then you don't need to restate it in a pipe.

-   This is more of a simple linear workflow.

    ```{r}
    surveys_sml<- surveys %>% 
      filter (weight <5) %>% 
      select(species_id, sex, weight)
    surveys_sml
    ```

## Challenge: 

Using pipes, subset the `surveys` data to include individuals collected before 1995 and retain only the columns `year`, `sex`, and `weight`. Name this dataframe `surveys_challenge`

```{r}
surveys_challenge<- surveys %>% 
  filter(year <1995) %>% 
  select(year, sex, weight)
surveys_challenge
```

## Mutate: 

Frequently, you will want to create new columns based on the values in existing columns. for example if you want to do a unit conversion or find the ration of values in two columns.

```{r}
surveys %>% 
  mutate(weight_kg = weight /1000)
```

You can also create a second new column based on the first new column you just made in the table above.

```{r}
surveys %>% 
  mutate(weight_kg = weight /1000,
         weight_kg2 = weight_kg * 2) %>%
  head()
```

## REMOVE NAs with filter()

you would then just use (!is.na(weight))

-   The `is.na()` function checks if something is missing (NA). The `!` symbol means "not," so this asks for every row where `weight` is *not* missing.

```{r}
surveys %>% 
  filter(!is.na(weight)) %>% 
  mutate(weight_kg = weight /1000,
         weight_kg2 = weight_kg * 2) %>%
  head()
```

# Challenge 2

Create a new data frame from the `surveys` data that meets the following criteria: contains only the `species_id` column and a new column called `hindfoot_half` containing values that are half the `hindfoot_length` values. In this `hindfoot_half` column, there are no `NA`s and all values are less than 30. Name this data frame `surveys_hindfoot_half`.

**Hint**: think about how the commands should be ordered to produce this data frame!

```{r}
surveys_hindfoot_half<- surveys %>% 
  filter(!is.na(hindfoot_length)) %>% 
  mutate(hindfoot_half = hindfoot_length/2) %>%
  filter(hindfoot_half <30) %>% 
  select(species_id, hindfoot_half)
surveys_hindfoot_half
  
```

## Group By and Summarize 

USE THE SPLIT, APPLY, COMBINE PARADIGM

-   split the date into groups, apply some of the analysis to each group, and combine the results. This is super easy if we use the group_by( ) function.

-   `group_by()` lets you select one or more categorical variables to define the groups in your data. Once grouped, you can apply functions like `summarize()` to calculate summary statistics for each group.

-   The `group_by()` function takes column names with categorical variables that define how you want to group the data for your analysis.

You can use `group_by()` to split the data into male and female groups, then use `summarize()` to calculate the average weight for each group. Here's an example in R:

In this case we are looking at two categorical variables using group_by( ) and calculating the mean weight of each species by sex

```{r}
surveys %>% 
  filter(!is.na(weight)) %>% 
  group_by(sex, species_id) %>%
  summarize(mean_weight = mean(weight, na.rm = T)) %>% 
  print(n=15)
```

## You can also summarize multiple variables: 

you can summarize multiple variables at the same time (and not necessarily on the same variable. For instance, we could ass a column indicating minimum weight for each species for sex.

-   For instance we could add a column indicating the minimum weight for each species for each sex.

```{r}
surveys %>% 
  filter(!is.na(weight)) %>% 
  group_by(sex, species_id) %>% 
  summarize(mean_weight =mean(weight), 
            min_weight =min(weight))
```

## Challenge: 

1.  What was the weight of the heaviest animal measured in each year? Return a table with three columns: year, weight of the heaviest animal in grams, and weight in kilograms, arranged (`arrange()`) in descending order, from heaviest to lightest. (This table should have 26 rows, one for each year)

```{r}
m<-surveys %>% 
  filter(!is.na(weight)) %>%
  group_by(year) %>% 
  summarize(max_weight_g = max(weight)) %>% 
  mutate(max_weight_kg = max_weight_g/1000) %>% 
  arrange()
m
```

1.  Try out a new function, `count()`. Group the data by `sex` and pipe the grouped data into the `count()` function. How could you get the same result using `group_by()` and `summarize()`? Hint: see `?n`.

    ```{r}
    surveys %>% 
      group_by(sex) %>% 
      count()

    surveys %>% 
      group_by(sex) %>% 
      summarize(n=n())
    ```

## Week 3 Homework: 

```{r}
surveys<-read_csv("data/portal_data_joined.csv")

surveys %>% 
  filter(weight >=30 & weight <=60) %>% 
  print(n=6)

biggest_critters<-surveys %>%
  filter(!is.na(weight)) %>% 
  group_by(species_id, sex) %>% 
  summarize(max_weight = max(weight)) %>% 
  arrange(max_weight)
biggest_critters


```

```{r}
surveys_avg_weight<- surveys %>% 
  filter(!is.na(weight)) %>% 
  group_by(species_id, sex) %>% 
  mutate(avg_weight= mean(weight)) %>%
  select(species_id, sex, weight, avg_weight)
  
surveys_avg_weight
```

```{r}
surveys_avg_weight <- surveys_avg_weight %>% 
  mutate(above_average = weight > avg_weight)

surveys_avg_weight
```
